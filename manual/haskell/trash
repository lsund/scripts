#!/bin/env runhaskell
{-# Language OverloadedStrings #-}

import System.Environment   (getEnv)
import System.Directory     (doesFileExist, createDirectoryIfMissing)
import System.Exit          (exitFailure)

import Control.Monad        (when)
import Control.Monad.Extra  (findM)

import Data.Text            (Text)
import Data.Maybe           (isNothing)

data File = File | Directory

warningKB = 5000
filedir = "/trash-files"
dirdir  = "/trash-dirs"

rmCommand :: IO (Maybe FilePath)
rmCommand = findM doesFileExist ["/usr/bin/rm", "/bin/rm"]

trashDir :: IO FilePath
trashDir = do
    home <- getEnv "HOME"
    return $ home ++ "/trash-test/trash"

mkdirs :: [FilePath] -> IO ()
mkdirs = mapM_ (createDirectoryIfMissing True)

destDir :: FilePath -> File -> FilePath
destDir trashDir File      = trashDir ++ filedir
destDir trashDir Directory = trashDir ++ dirdir

main = do
    rmc <- rmCommand
    td <- trashDir
    when (isNothing rmc) exitFailure
    mkdirs [destDir File, distDir Directory]

-- TODO Continue at CountIdentical

