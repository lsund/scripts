#!/bin/zsh

# Script to automate the setup of my preferred environment on arch-linux or ubuntu.

ping -c 3 www.duckduckgo.com > /dev/null 2>&1
if [[ $? != "0" ]]; then
    echo "This script needs an active connection. Exiting."
    exit
fi


: ${DOTFILES?"Need to set env variable: DOTFILES"}
: ${HOME?"Need to set env variable: HOME"}

vimrc=$HOME/.vimrc
vim=$HOME/.vim
VIM=$HOME/.vim
al=$HOME/.aliases
git=$HOME/.config/git/config
emacsd=$HOME/.emacs.d

# ############################################################################
# Determine distro (Hacky solution)

distro="unknown"

which apt-get > /dev/null 2>&1
if [[ $? == "0" ]]; then
    distro="ubuntu"
    fontdir=$HOME/.fonts
fi

which pacman > /dev/null 2>&1
if [[ $? == "0" ]]; then
    distro="arch"
    fontdir=$HOME/.local/share/fonts
fi

if [[ $distro == "unknown" ]]; then
    echo "Unknown distro" && exit
fi

# ############################################################################
# Install Fonts

mkdir -p $fontdir
cp $DOTFILES/fonts/hack/* $fontdir
cp $DOTFILES/fonts/adobe-source-code-pro/* $fontdir
fc-cache -f -v

# ############################################################################
# Install Packages/Scripts/Programs

# trans
which trans > /dev/null 2>&1
if [[ $? == "1" ]]; then
    wget git.io/trans
    chmod +x ./trans
    mv trans $HOME/bin
fi

# haskell stack
which stack > /dev/null 2>&1
if [[ $? == "1" ]]; then
    curl -sSL https://get.haskellstack.org/ | sh
fi

if [[ $distro == "ubuntu" ]]; then

    sudo apt-get update && sudo apt-get upgrade

    keys

    declare -a packages=("htop"
                         "texlive-full"
                         "cabal-install"
                         "openjdk-8-jdk"
                         "ruby"
                         "git"
                         "vim"
                         "ghc"
                         "pass"
                         "graphviz"
                         "pdf-presenter-console"
                         "silversearcher-ag"
                         "pwgen"
                         "build-essential"
                         "cmake"
                         "python-dev"
                         "python3-dev"
                         "python3-venv"
                         "g++"
                         "redshift"
                         "gimp"
                         "scrot"
                         "mirage")

    for package in "${packages[@]}"
    do
	out=$(apt-cache search ^$package$)
	if [[ out == "" ]]; then
	   echo "Package $package does not exist" && exit
	fi
        dpkg -s $package > /dev/null 2>&1
        if [[ $? == "1" ]]; then
            sudo apt-get install $package
        fi
    done

    which pandoc > /dev/null 2>&1
    if [[ $? == "1" ]]; then
	git clone https://github.com/jgm/pandoc
	cd pandoc
	stack setup
	stack install --test
	cd ..
	rm -rf pandoc
    fi

elif [[ $distro == "arch" ]]; then

    sudo pacman -Suy

    declare -a packages=("htop"
                         "texlive-most"
                         "pdfpc"
                         "cabal-install"
                         "jdk8-openjdk"
                         "ruby"
                         "ghc"
                         "git"
                         "vim"
                         "graphviz"
                         "the_silver_searcher"
                         "pwgen"
                         "cmake"
                         "python2"
                         "python-virtualenv"
                         "g++"
                         "redshift"
                         "gimp"
                         "scrot"
                         "pandoc"
                         "pass"
                         "mirage")

    for package in "${packages[@]}"
    do
	pacman -Ss ^$package$ > /dev/null 2>&1
	if [[ $? == "1" ]]; then
	   echo "Package $package does not exist" && exit
	fi
        pacman -Qi $package > /dev/null 2>&1
        if [[ $? == "1" ]]; then
            sudo pacman -S $package
        fi
    done
fi

# ############################################################################
# Setup cabal
#
cabal update
cabal install pandoc-include-code

# ###########################################################################
# Clone some repos

evil=$HOME/.emacs.d/evil
if [[ ! -e $evil ]]; then
    git clone https://github.com/emacs-evil/evil.git $evil
fi

vundle=$VIM/bundle/Vundle.vim
if [[ ! -e $vundle ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git $vundle
fi

vim_plug=$VIM/autoload/plug.vim
if [[ ! -e $vim_plug ]]; then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

ycm_core=$VIM/plugged/YouCompleteMe/third_party/ycmd/ycm_core.so
if [[ ! -e $ycm_core ]]; then
    $vim/plugged/YouCompleteMe/install.py
fi

mkdir -p $HOME/Documents/tech/presentations
auto_presentation_build=$HOME/Documents/tech/presentations/automate-template
if [[ ! -e $auto_presentation_build ]]; then
    url="https://github.com/owickstrom/"
    repo="automating-the-build-of-your-technical-presentation-template"
    git clone $url$repo $auto_presentation_build
fi

# #############################################################################
# Install soft links

# Make some directories
mkdir -p $vim/ftplugin
mkdir -p $emacsd/config
mkdir -p $HOME/.config/git

## Sources

# Vim
zsh_plugin=$DOTFILES/vim/ftplugin/zsh.vim
haskell_plugin=$DOTFILES/vim/ftplugin/haskell.vim
python_plugin=$DOTFILES/vim/ftplugin/python.vim
clojure_plugin=$DOTFILES/vim/ftplugin/clojure.vim

vim_rc=$DOTFILES/vimrc

# Emacs
emacs_file=$DOTFILES/emacs/emacs
emacs_init=$DOTFILES/emacs/init.el
emacs_config=$DOTFILES/emacs/config/my-config.el
emacs_keybindings=$DOTFILES/emacs/config/my-keybindings.el
emacs_clojure=$DOTFILES/emacs/config/my-clojure.el
emacs_elisp=$DOTFILES/emacs/config/my-elisp.el
emacs_powerline=$DOTFILES/emacs/config/my-powerline.el
emacs_haskell=$DOTFILES/emacs/config/my-haskell.el
emacs_org=$DOTFILES/emacs/config/my-org.el
emacs_lisp=$DOTFILES/emacs/config/my-lisp.el
emacs_python=$DOTFILES/emacs/config/my-python.el

# Git
git_config=$DOTFILES/git/config

# Misc
zsh_rc=$DOTFILES/zshrc
_aliases="$DOTFILES/aliases"
tmux=$DOTFILES/tmux.conf

## Destinations

# Vim
loc_zsh_plugin=$VIM/ftplugin/zsh.vim
loc_haskell_plugin=$VIM/ftplugin/haskell.vim
loc_python_plugin=$VIM/ftplugin/python.vim
loc_clojure_plugin=$VIM/ftplugin/clojure.vim

loc_vim_rc=$HOME/.vimrc

# Emacs

loc_emacs_file=$HOME/.emacs
loc_emacs_init=$emacsd/init.el
loc_emacs_config=$emacsd/config/my-config.el
loc_emacs_keybindings=$emacsd/config/my-keybindings.el
loc_emacs_clojure=$emacsd/config/my-clojure.el
loc_emacs_elisp=$emacsd/config/my-elisp.el
loc_emacs_powerline=$emacsd/config/my-powerline.el
loc_emacs_haskell=$emacsd/config/my-haskell.el
loc_emacs_org=$emacsd/config/my-org.el
loc_emacs_lisp=$emacsd/config/my-lisp.el
loc_emacs_python=$emacsd/config/my-python.el

# Git
loc_git_config=$HOME/.config/git/config

# Misc
loc_zsh_rc=$HOME/.zshrc
loc_aliases="$HOME/.aliases"
loc_tmux=$HOME/.tmux.conf

## Insertions

# Vim
[[ -f $loc_zsh_plugin ]]        || ln -s $zsh_plugin        $loc_zsh_plugin
[[ -f $loc_haskell_plugin ]]    || ln -s $haskell_plugin    $loc_haskell_plugin
[[ -f $loc_python_plugin ]]     || ln -s $python_plugin     $loc_python_plugin
[[ -f $loc_clojure_plugin ]]    || ln -s $clojure_plugin    $loc_clojure_plugin

[[ -f $loc_vim_rc ]]            || ln -s $vim_rc            $loc_vim_rc

# Emacs
[[ -f $loc_emacs_file ]]        || ln -s $emacs_file        $loc_emacs_file
[[ -f $loc_emacs_init ]]        || ln -s $emacs_init        $loc_emacs_init
[[ -f $loc_emacs_config ]]      || ln -s $emacs_config      $loc_emacs_config
[[ -f $loc_emacs_keybindings ]] || ln -s $emacs_keybindings $loc_emacs_keybindings
[[ -f $loc_emacs_clojure ]]     || ln -s $emacs_clojure     $loc_emacs_clojure
[[ -f $loc_emacs_elisp ]]       || ln -s $emacs_elisp       $loc_emacs_elisp
[[ -f $loc_emacs_powerline ]]   || ln -s $emacs_powerline   $loc_emacs_powerline
[[ -f $loc_emacs_haskell ]]     || ln -s $emacs_haskell     $loc_emacs_haskell
[[ -f $loc_emacs_org ]]         || ln -s $emacs_org         $loc_emacs_org
[[ -f $loc_emacs_lisp ]]        || ln -s $emacs_lisp        $loc_emacs_lisp
[[ -f $loc_emacs_python ]]      || ln -s $emacs_python      $loc_emacs_python

# Git
[[ -f $loc_git_config ]]        || ln -s $git_config        $loc_git_config

# Misc
[[ -f $loc_zsh_rc ]]            || ln -s $zsh_rc            $loc_zsh_rc
[[ -f $loc_aliases ]]           || ln -s $_aliases          $loc_aliases
[[ -f $loc_tmux ]]              || ln -s $tmux              $loc_tmux

# ############################################################################
# Other configs

git config --global core.autocrlf true
