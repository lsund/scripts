#!/bin/zsh

# Script to automate the setup of my preferred environment on arch-linux or ubuntu.

# ############################################################################
# Funcitons

function PrintSeparator() {
    echo "####################################################################"
    echo $1
}

PrintSeparator "Starting Script"

PrintSeparator "Establishing internet connection"
ping -c 3 www.archlinux.org > /dev/null 2>&1
if [[ $? != "0" ]]; then
    echo "This script needs an active connection. Exiting."
    exit
fi

if [[ -z "${DOTFILES}" ]]; then
    echo "DOTFILES is not set."
    echo "Set it or source ./env.sh"
    exit
else
    echo "DOTFILES is set to $DOTFILES"
fi
if [[ -z "${SCRIPTS}" ]]; then
    echo "SCRIPTS is not set."
    echo "Set it or source ./env.sh"
    exit
else
    echo "SCRIPTS is set to $SCRIPTS"
fi

vimrc=$HOME/.vimrc
vim=$HOME/.vim
VIM=$HOME/.vim
al=$HOME/.aliases
git=$HOME/.config/git/config
emacsd=$HOME/.emacs.d

# ############################################################################
# Determine distro (in a hacky way)

PrintSeparator "Determining Distro"

distro="unknown"

which apt-get > /dev/null 2>&1
if [[ $? == "0" ]]; then
    distro="ubuntu"
    fontdir=$HOME/.fonts
    PrintSeparator "Ubuntu detected"
fi

which pacman > /dev/null 2>&1
if [[ $? == "0" ]]; then
    distro="arch"
    fontdir=$HOME/.local/share/fonts
    PrintSeparator "Arch Linux detected"
fi

vared -p "Continue? [Y/n]? " -c choice

[[ "$choice" == "n" ]] && exit 0;

if [[ $distro == "unknown" ]]; then
    echo "Unknown distro" && exit
fi

# ############################################################################
# Install Fonts

PrintSeparator "Installing Fonts"

mkdir -p $fontdir
cp $DOTFILES/fonts/hack/* $fontdir
cp $DOTFILES/fonts/adobe-source-code-pro/* $fontdir
fc-cache -f -v

# ############################################################################
# Install Packages/Scripts/Programs

PrintSeparator "Updating package base and installing packages"

./install-packages $distro

# ############################################################################
# Setup stack and pandoc

which stack > /dev/null 2>&1
if [[ $? == "1" ]]; then
    curl -sSL https://get.haskellstack.org/ | sh
fi

PrintSeparator "Setting up haskell"
stack update

which pandoc > /dev/null 2>&1
if [[ $? == "1" ]]; then
git clone https://github.com/jgm/pandoc
cd pandoc
stack setup
stack install --test --flag pandoc:-embed_data_files
cd ..
SCRIPTS/trash pandoc
fi
stack install pandoc-include-code

# ###########################################################################
# Fetch repos

PrintSeparator "Cloning some git repos"

evil=$HOME/.emacs.d/evil
if [[ ! -e $evil ]]; then
    git clone https://github.com/emacs-evil/evil.git $evil
fi

vundle=$VIM/bundle/Vundle.vim
if [[ ! -e $vundle ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git $vundle
fi

vim_plug=$VIM/autoload/plug.vim
if [[ ! -e $vim_plug ]]; then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

ycm_core=$VIM/plugged/YouCompleteMe/third_party/ycmd/ycm_core.so
if [[ ! -e $ycm_core ]]; then
    $vim/plugged/YouCompleteMe/install.py
fi

# ###########################################################################
# Git Config

[[ -e "~/.git_template" ]] && mkdir "~/.git_template"
git config --global init.templatedir '~/.git_template'
git config --global core.autocrlf false
git config --global user.name "Ludvig Sundstr√∂m"
git config --global user.email lud.sund@gmail.com
git config --global push.default simple

# #############################################################################
# Install soft links

PrintSeparator "Installing Soft Links"

./install-symlinks

# ############################################################################
# Other configs

PrintSeparator "Last bits of config"

setxkbmap dvorak -option compose:caps


PrintSeparator "Done."
